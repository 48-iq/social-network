services:

  config-service:
    build:
      context: config-service
      dockerfile: Dockerfile
    ports:
      - 0:8888
    networks:
      - backend
    healthcheck:
      test: "curl -sf http://localhost:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  discovery-service:
    build:
      context: discovery-service
      dockerfile: Dockerfile
    ports:
      - 8761:8761
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy

  gateway:
    build:
      context: gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy

  auth-service:
    build:
      context: auth-service
      dockerfile: Dockerfile
    ports:
      - 0:8080
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy


  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "best_password"
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - database-data:/var/lib/postgresql/data
    ports:
      - 0:5432
    networks:
      - postgres
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_PASSWORD: "best_password"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_DEFAULT_EMAIL: "ivn25ov@mail.ru"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - postgres
    ports:
      - 5050:80

  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=abracadabra
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9090,EXTERNAL://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      backend:
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  redis:
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    environment:
      - REDIS_USER=redis
      - REDIS_PASSWORD=1234
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:

volumes:
  database-data:
  pgadmin-data:
  kafka-data:
  redis-data:

networks:
  postgres:
  backend: